I"k8<p>메일로 맏은 Q &amp; A 질문이 많아 공유 드립니다.</p>

<p>메일 질의응답은 화요일 저녁 20시까지만 받겠습니다.</p>

<h3 id="q1">Q1.</h3>

<p>Week 14 슬라이드의 47페이지에 대해 질문이 있어 메일 드립니다. (Archive 페이지의 Week 14: Recovery System 슬라이드입니다.)</p>

<p>Transaction failure이 발생했을 경우 commit 되지 않은 transaction에 대해 rollback을 실행하면 되는 것으로 이해했습니다.</p>

<p>그래서 이미 작성되어 있는 &lt;T1, C, 700&gt;과 &lt;T1, abort&gt;에 이어서</p>

<p>&lt;T0, A, 1000&gt;와 &lt;T0, abort&gt; 로그를 작성해야 하는 것이 아닌지 여쭙고 싶습니다.</p>

<p>슬라이드에서 T0은 &lt;T0, commit&gt;이 로그에 없는데 왜 T0에 대해서는 rollback을 실행하지 않는지 모르겠습니다.</p>

<p>42페이지에서 Let Ti be the transaction to be rolled back이라고 써있는데 그럼 혹시 transaction rollback할 transaction이 명시되어 있다는 말인가요? 그래서 T0은 rollback시키지 않는 건가요?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>표현을 몇가지 정정하겠습니다.

Transaction failure: failure에는 여러 종류가 있고, 이 중 Transaction Failure는 DBMS이 의도적으로 transaction를 terminate시키는 경우(e.g. 0으로 나눔, 데드락 발생하여 특정 트랜잭션을 죽임) 를 뜻합니다. 즉 이 때는 DBMS가 failure가 발생했다는 것을 인지하고 있는 상태이며, 이러한 경우 해당 transaction들은 정상적으로 abort됩니다. 

System Crash: power failure와 같은 외부 요인에 의해 발생하는 failure의 경우입니다. 별다른 protocol에 의해 보호되지 않는다면, DBMS가 어떠한 트랜잭션을 abort해야하는지 인지하지 못하므로 wal-protocol등을 사용합니다. wal protocol 사용 시, start 로그가 있으나 commit 또는 abort 로그가 없는 트랜잭션을 undo합니다. 

commit 되지 않은 transaction에 대해 rollback 시킨다: commit 또는 abort 되지 않은 transaction을 rollback 시켜야합니다. DBMS가 인지하고 있는 상태에서 정상적으로 종료 (commit, abort) 되지 않은 transaction을을 rollback 시킵니다. 

--------
정리: 
Transaction failure의 경우 DBMS의 인지 하에 문제 생긴 transaction 하나만 rollback
System Crash의 경우 WAL-protocol등의 도움으로 문제가 있어보이는 transaction들을 찾아 Undo
</code></pre></div></div>

<h3 id="q2">Q2</h3>
<p>Week 15 슬라이드의 30페이지에 대해 질문이 있어 메일 드립니다.</p>

<p>자식 노드에게 IX lock이 걸리기 위해서 부모 노드에 SIX lock이나 IX lock이 걸려있어야 한다고 이해했습니다.</p>

<p>근데 부모 노드에 SIX lock이 걸려야 하는 이유를 모르겠습니다.</p>

<p>SIX lock의 경우 나 포함 내 밑 노드가 전부 S lock에 걸려있고 그 중 일부가 X lock으로 업그레이드 된 상태라고 이해했는데</p>

<p>이렇다면, 부모노드 이하의 모든 노드에는 lock이 걸려있으므로 <나를 제외한=""> 이하의 노드에 적어도 X lock이 하나는 걸려있는 IX가 자식 노드에 허용이 될 수 있나요?</나를></p>

<p>IX lock이 자식 노드에 허용되려면 적어도 그 자식노드</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>락 소유의 주체는 트랜잭션이며
락 충돌은 서로다른 트랜잭션이 같은 자원에 compatible하지 않은 락을 요청하는 상황에서 발생합니다.

해당 락들을 걸고자 하는 주체는 동일한 트랜잭션입니다. Compatibility matrix는 다른 트랜잭션이 보유한 락을 지금 이 트랜잭션과 공유할 수 있는지 따져보는 행렬입니다. 

자기자신이 s로 암시적으로 걸어놓았고, 그 중의 일부는 다시 x락을 명시적으로 업그레이드한 상태입니다. 두 락 모두 자기자신에 의해 요청되고 할당되었습니다.
</code></pre></div></div>

<h3 id="q3">Q3</h3>
<p>시험 정리 슬라이드 112쪽에 보면 Levels of Consistency가 있습니다. 이것 관련 개념이 헷갈리는데,</p>

<p>Read committed 수준의 consistency는 commit된 값만 읽는다고 하는데 그러면 cascadeless 스케쥴인건가요?</p>

<p>그리고 114쪽, Non-repeatable read에서 보면 T1이 커밋하지 않은 값을 T2에서 읽고 있는데 그러면 이는 Read uncommitted 수준의 설계인가요?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1-1. 좋은 질문입니다. Read committed 수준의 consistency level에서는 각 트랜잭션에서는 commit된 item만 읽습니다. cascadeless 스케쥴 정의(108)에 따라, Read committed 수준의 isolation 레벨의 스케쥴은 cacadeless schedule임을 알 수 있습니다. 
1-2. 네 Read uncommitted 수준의 스케쥴입니다. 
</code></pre></div></div>

<h3 id="q4">Q4</h3>
<p>시험 정리 슬라이드에서 Multiple Granularity 관련, 177, 178쪽을 보면,</p>

<p>T2에서 lock-X를 걸었는데 T3에서는 그 상위에서 lock-S를 걸고 있습니다.</p>

<p>하위에 X가 있기 때문에 T3에서 가능한 건 IX, SIX밖에 안 될 것 같은데,</p>

<p>T3에서 lock을 걸 때는 T2의 lock이 풀린 상태라고 봐야 하는건가요?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pp. 176~179는 서로 독립적인 상황입니다. 네 가지 사건이 동시에 발생하고 있지 않은 상황에 대한 슬라이드입니다. 
</code></pre></div></div>

<h3 id="q5">Q5</h3>

<ol>
  <li>
    <p>WAL protocol의 no-focre policy와 steal policy
no-force policy는 transaction이 commit 되어도 disk에 반영하지 않고, steal policy는 transaction의 commit 이전에 언제든지 disk에 반영할 수 있는 내용으로 알고 있습니다. 이 두 가지 policy가 recovery algorithm에 사용되는 것으로 알고 있는데, 이 둘은 상충하는 내용이 아닌가요? 어떻게 둘 모두 적용될 수 있는 것인지 이해가 되지 않습니다.</p>
  </li>
  <li>
    <p>Locking
나눠주신 예상 시험문제 6번과 관련된 내용입니다. 부모 P가 IS 또는 IX일 때, 자식 노드 Q에 S 또는 IS 모드로 locking할 수 있다고 쓰여있습니다. 그런데 부모 P가 IX인 경우, 어떤 자식 노드가 X-lock일 수 있으므로 Q에 S mode로 lock를 거는 것은 반드시 충돌이 발생하므로 불가능하지 않나요?</p>
  </li>
  <li>
    <p>Log
나눠주신 예상 시험문제 10번에서, “디스크로 output 되기 전, 해당 블록과 관련된 일부 레코드들이 stable storage로 output되지 않는 경우 데이터베이스가 일관성을 잃어버리는 경우가 발생할 수 있다”고 되어있는데, 디스크로 output되기 전에, log buffer에서 commit이 쓰여진 transaction만 stable storage에 기록되고, 기록된 transaction 중에서 commit이 있는 경우만 commit이 진행되므로, 문제에서 서술한 이런 경우는 존재하지 않는 것이 아닌가요?</p>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 상충되지 않습니다. 표현을 조금 정정하겠습니다. 
no-force:  updated blocks need not be written to disk when transaction commits =&gt; transaction이 commit되어도 disk에 (반영해도 되고) 반영하지 않아도 된다. 
steal: blocks containing updates of uncommitted transactions can be written to disk, even before the transaction commits: transaction의 commit 이전에도 update된 block을 disk에 반영 할 수 있(고 그러지 않아도 된)다. 

두 정책을 모두 사용한다는 뜻은, 조금 직관적으로 말하자면,
buffer manager가 자율적으로 디스크 입출력을 전담한다는 뜻입니다. 

commit되었든 commit되지 않았든,  buffer manager는 특정 행동을 강제적으로 수행(e.g. force)해야하거나 특정 행동 수행을 불가능(e.g. no-steal)하게 강제되는 규칙이 따로 없습니다. 
force와 no-steal은 recovery를 위해 필요한 개념들입니다. 
그러나 어차피 recovery는 WAL 이 전담하니 buffer manager는 블록 입출력을 자율적으로 해도 됩니다. 

2.3: 문제 유형에 대한 질의응답은 따로 받고있지 않습니다만, 매우 간략하게만 말씀드리겠습니다. 

2. 문제 접근 관점이 다소 다릅니다. 해당 문제는 '충돌 가능성'으로 접근하시면 안되고, '락의 의미' 또는 '효율성' 쪽으로 접근하셔야 합니다. 

'충돌 가능성'에 대하여: 락 소유의 주체는 트랜잭션이며 락 충돌은 서로다른 트랜잭션이 같은 자원에 compatible하지 않은 락을 요청하는 상황에서 발생합니다.
문제에서, 해당 락들을 걸고자 하는 주체는 동일한 트랜잭션인 Ti입니다. 

수업에서 배운 Compatibility matrix는 다른 트랜잭션이 보유한 락을 지금 이 트랜잭션과 공유할 수 있는지 따져보는 행렬입니다. 

3. 네, 적법한 WAL + log buffering 프로토콜에 의해 보호받고 있지 못할 때의 상황을 가정하고 내는 문제입니다. 
</code></pre></div></div>

<h3 id="q6">Q6</h3>

<p>b+ tree를 공부하던 와중 몇시간동안 해메어도 아직도 이해가 완전히 되지 않아서 메일드립니다.</p>

<p>B+ tree의 각 노드가 가질 수 있는 children 수에 상한이 있는 이유는, disk-oriented dbms에서는 한 블락에 저장 할 수 있는 데이터의 수 때문인가요? 즉 한 블락에 저장되는 튜플의 수보다 children이 많으면 안되니까? 이 상한 부분이 잘 이해가 안됩니다 ㅠㅠ..
반대로 하한이 있는 이유는 트리의 height를 최소화 시키기 위해 (각 path가 디스크 입출력을 의미하기 때문) 인거죠? 이거는 좀 이해가 됩니다..</p>

<p>그렇다면 상한과 하한이 있는 이유는 최대한 효율적으로 disk i/o를 최소화하기 위함이라고 생각하면 되는건가요?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. B+ tree의 각 노드가 가질 수 있는 children 수에 상한이 있는 이유는, disk-oriented dbms에서는 한 블락에 저장 할 수 있는 데이터의 수 때문인가요? 즉 한 블락에 저장되는 튜플의 수보다 children이 많으면 안되니까? 이 상한 부분이 잘 이해가 안됩니다 ㅠㅠ..

TLDR; 대체적으로 맞는 표현입니다. if (한 블락에 저장되는 튜플의 수 &lt; children의 수) =&gt; 한 노드가 한 블록에 저장안됨 =&gt; 한 노드를 읽기 위해 block을 두 번 이상 읽어야함

disk에 저장되어 있는 바이너리 트리를 가정해볼까요? 루트노드를 불러오려면 key 하나와 포인터 두개를 불러와야할 것입니다. 약 12바이트 정도라고 가정할까요?
그런데, disk와 memory는 block 단위로 데이터를 주고 받기 때문에 내가 읽고 싶은게 12바이트라고 할지라도 4K바이트를 읽어들여야합니다.
어차피 블록 단위의 디스크 입출력이 발생하는 건 똑같은데 기왕 읽는 (4K - 12) 바이트를 낭비하고 싶은 사람은 없을겁니다. 

이러한 점에 착안하여, B+Tree의 각 노드는 하나의 블록에 저장되도록 설계되었습니다.  
디스크로 가서 기왕 한 블록 읽어오는 김에 가능한 한 많이  children을 가져옵니다. 
그렇다고 또 너무 많이 가져오면 안됩니다. 너무 많이 가져오면, 두 블록 이상의 데이터 입출력이 필요하기 때문입니다. 

=&gt; 이 때문에 children을 가질 수 있는 상한이 존재합니다. 

2. 반대로 하한이 있는 이유는 트리의 height를 최소화 시키기 위해 (각 path가 디스크 입출력을 의미하기 때문) 인거죠? 이거는 좀 이해가 됩니다.: 축하합니다.

3. 상한과 하한이 있는 이유는 최대한 효율적으로 disk i/o를 최소화하기 위함이라고 생각하면 되는건가요?: 맞습니다. 각 노드를 블록 단위로 관리하되 (상한) height의 수가 너무 높아지지 않게 제한(하한)하고 싶은 겁니다. 

</code></pre></div></div>

<h3 id="q7">Q7</h3>

<ol>
  <li>다름이 아니고 블랙보드에 올려주신 기말고사 유형 8-(1)의 ②에 대해 질문이 있어 메일 드립니다.</li>
</ol>

<blockquote>
  <p>hotel과 guest의 join 결과 두 테이블 사이에 겹치는 attribute가 없으므로 join estimation은 100*500 즉, 50,000입니다. 이와 같이 “joined table”에서 city = “guest_city”를 selection estimation 하기 위해서는 “joined table”에서의 city란 attribute의 distinct한 개수를 알아야 합니다. 그 개수는 V(city, hotel)과 동일하므로 ②의 답은 50,000 / 20 = 2,500입니다. 이때 hotel과 guest 테이블에 겹치는 attribute가 없어 V(city, joined table)을 V(city, hotel)과 동일하다고 풀어봤는데 답이 맞는지 모르겠습니다. 혹시 틀렸다면 어디가 틀렸는지 말씀해주시면 감사드리겠습니다.</p>
</blockquote>

<ol>
  <li>또한 유형 8-(3)에 대해 질문이 있습니다.</li>
</ol>

<blockquote>
  <p>indexed nested-loop join으로 수행했을 때의 소요되는 비용이 100번의 block transfer, 100번의 block transfer + 2000 * c 인데 이때 join시 공통되는 attribute가 guest의 candidate key이므로 4번의 block transfer와 4번의 seek이 indexed search에 소요되는 c이므로 문제의 답은 8,100번의 block transfer과 8,100번의 seek이 소요 비용이 맞는지 알고 싶습니다. 혹시 틀렸다면 어디가 틀렸는지 말씀해주시면 감사드리겠습니다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 우리가 수업시간에 다루었던 join size estimation은 Natural Join을 가정했습니다. 문제 유형 8-(1) 2번의 경우 Natural Join이 아닙니다. 

2. 직접적으로 말씀드릴 수는 없으나, 잘 하고 계십니다 :)
</code></pre></div></div>

:ET